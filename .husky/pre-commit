echo \[üê∂ Husky] Running pre-commit hook...\

# Get current branch
current_branch=$(git rev-parse --abbrev-ref HEAD)

# Check if we're not on main branch
if [ "$current_branch" != "main" ]; then
    echo "üîç Checking for branch updates..."

# Fetch all latest changes
    git fetch origin

# Check if main has commits that dev doesn't have
    behind_commits=$(git rev-list --count $current_branch..origin/main)
    if [ "$behind_commits" -gt 0 ]; then
        echo "‚ÑπÔ∏è  Main branch has $behind_commits new commits that are not in your branch! Update your branch before committing."
        echo "‚ÑπÔ∏è  [‚è©]Run: git stash && git merge origin/main && git stash pop"
        exit 1
    else
        echo "‚úÖ Your branch is up to date with main"
    fi

# Check if remote branch has new commits
    remote_commits=$(git rev-list --count $current_branch..origin/$current_branch 2>/dev/null)
    if [ "$remote_commits" -gt 0 ]; then
        echo "‚ùó Remote branch has $remote_commits new commits! Pull changes before committing."
        echo "‚ÑπÔ∏è  [‚è©]Run: git stash && git merge origin/$current_branch && git stash pop"
        exit 1
    else
        echo "‚úÖ Your branch is up to date with remote"

        # Check if husky:pre-commit script exists
        if yarn run --list | grep -q "husky:pre-commit"; then
            yarn husky:pre-commit
        else
            echo "‚ö†Ô∏è  Warning: husky:pre-commit script not found in package.json"
            echo "‚ÑπÔ∏è  Add 'husky:pre-commit' script to your package.json to run additional checks"
        fi
    fi
fi

echo \[üê∂ Husky] Done ‚úÖ pre-commit hook...\

exit 0
